{"version":3,"sources":["components/header/header.component.jsx","pages/sign-in/sign-in.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","useColorMode","colorMode","toggleColorMode","Flex","as","align","justify","wrap","position","top","width","padding","overflow","bg","light","dark","borderBottom","borderBottomColor","mr","Icon","name","size","color","Heading","Box","onClick","cursor","SignIn","w","Stack","spacing","Button","leftIcon","App","h","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","ColorModeProvider","CSSReset","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPA0CeA,EAjCA,WAAO,IAAD,EACoBC,cAA/BC,EADW,EACXA,UAAWC,EADA,EACAA,gBAGnB,OACE,kBAACC,EAAA,EAAD,CACEC,GAAG,MACHC,MAAM,SACNC,QAAQ,gBACRC,KAAK,OACLC,SAAS,QACTC,IAAI,IACJC,MAAM,OACNC,QAAQ,IACRC,SAAS,SACTC,GAbU,CAACC,MAAO,QAASC,KAAM,YAarBd,GACZe,aAAa,MACbC,kBAAkB,YAElB,kBAACd,EAAA,EAAD,CAAME,MAAM,SAASa,GAAI,GACzB,kBAACC,EAAA,EAAD,CAAMC,KAAK,OAAOF,GAAI,EAAGG,KAAK,OAAOC,MAAM,cACzC,kBAACC,EAAA,EAAD,CAASnB,GAAG,KAAKiB,KAAK,MAAtB,YAKF,kBAACG,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,CAAMC,KAxBD,CAACN,MAAO,OAAQC,KAAM,OAwBVd,GAAYwB,QAASvB,EAAiBmB,KAAK,OAAOK,OAAO,e,gBCrBnEC,EAZA,WACb,OACE,kBAACH,EAAA,EAAD,CAAKI,EAAE,OACL,kBAACC,EAAA,EAAD,CAAOC,QAAS,GACd,kBAACP,EAAA,EAAD,CAASnB,GAAG,MAAZ,cACA,kBAACmB,EAAA,EAAD,CAASnB,GAAG,MAAZ,WACA,kBAAC2B,EAAA,EAAD,CAAQC,SAAS,gBAAgBtB,MAAM,SAAvC,0BCQOuB,EAXH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC9B,EAAA,EAAD,CAAMG,QAAQ,SAASD,MAAM,SAASuB,EAAE,OAAOM,EAAE,QACjD,kBAAC,EAAD,SCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,SAIJC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.157e88bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  Icon,\r\n  useColorMode,\r\n} from \"@chakra-ui/core\";\r\n\r\nconst Header = () => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\nconst bgColor = {light: \"white\", dark: \"gray.800\"}\r\nconst icon = {light: \"moon\", dark: \"sun\"}\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      align=\"center\"\r\n      justify=\"space-between\"\r\n      wrap=\"wrap\"\r\n      position=\"fixed\"\r\n      top=\"0\"\r\n      width=\"100%\"\r\n      padding=\"4\"\r\n      overflow=\"hidden\"\r\n      bg={bgColor[colorMode]}\r\n      borderBottom=\"1px\"\r\n      borderBottomColor=\"gray.100\"\r\n    >\r\n      <Flex align=\"center\" mr={5}>\r\n      <Icon name=\"edit\" mr={5} size=\"24px\" color=\"green.400\"/>\r\n        <Heading as=\"h1\" size=\"lg\">\r\n          Post IT\r\n        </Heading>\r\n      </Flex>\r\n      \r\n      <Box>\r\n        <Icon name={icon[colorMode]} onClick={toggleColorMode} size=\"24px\" cursor=\"pointer\"/>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Box, Heading, Button, Stack } from \"@chakra-ui/core\";\r\n\r\nconst SignIn = () => {\r\n  return (\r\n    <Box w=\"80%\">\r\n      <Stack spacing={4}>\r\n        <Heading as=\"h2\">Welcome to</Heading>\r\n        <Heading as=\"h3\">Post IT</Heading>\r\n        <Button leftIcon=\"arrow-forward\" width=\"250px\">Sign In with Google</Button>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\nimport {Flex} from '@chakra-ui/core'\n\nimport Header from \"./components/header/header.component\";\nimport SignIn from \"./pages/sign-in/sign-in.component\";\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Flex justify=\"center\" align=\"center\" w=\"100%\" h=\"93vh\">\n      <SignIn />\n      </Flex>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ThemeProvider, CSSReset,ColorModeProvider } from \"@chakra-ui/core\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <ThemeProvider>\n  <ColorModeProvider>\n    <CSSReset />\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    </ColorModeProvider>\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}