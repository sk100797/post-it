{"version":3,"sources":["redux/user/user.types.js","redux/user/user.actions.js","components/header/header.component.jsx","pages/sign-in/sign-in.component.jsx","pages/homepage/homepage.component.jsx","App.js","redux/user/user.reducer.js","redux/root-reducer.js","firebase/firebase.utils.js","redux/user/user.sagas.js","redux/root-saga.js","redux/store.js","serviceWorker.js","index.js"],"names":["userActionTypes","SET_CURRENT_USER","CHECK_USER_SESSION","GOOGLE_SIGN_IN_START","SIGN_IN_SUCCESS","SIGN_IN_FAILURE","SIGN_OUT_START","SIGN_OUT_SUCCESS","SIGN_OUT_FAILURE","signInFailure","error","type","payload","Header","currentUser","useSelector","state","user","dispatch","useDispatch","useColorMode","colorMode","toggleColorMode","Flex","as","align","justify","wrap","position","top","width","padding","overflow","bg","light","dark","borderBottom","borderBottomColor","mr","Icon","name","size","color","Heading","Box","onClick","cursor","Button","leftIcon","variantColor","variant","connect","googleSignInStart","w","Stack","spacing","HomePage","maxW","borderWidth","rounded","Image","src","photoURL","alt","mt","fontWeight","lineHeight","isTruncated","displayName","split","checkUserSession","useEffect","h","exact","path","render","to","INITIAL_STATE","userReducer","action","rootReducer","combineReducers","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","createUserProfileDocument","userAuth","a","userRef","doc","uid","get","exists","email","createdAt","Date","set","console","log","message","getSnapshotFromUserAuth","signInWithGoogle","signOut","isUserAuthenticated","onGoogleSignInStart","onSignOutStart","onCheckUserSession","userSagas","call","userSnapshot","put","id","data","signInWithPopup","Promise","resolve","reject","unsubscribe","onAuthStateChanged","takeLatest","all","rootSaga","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","ThemeProvider","ColorModeProvider","CSSReset","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f0b412fb.chunk.js","sourcesContent":["const userActionTypes = {\r\n  SET_CURRENT_USER: \"SET_CURRENT_USER\",\r\n  CHECK_USER_SESSION: \"CHECK_USER_SESSION\",\r\n  GOOGLE_SIGN_IN_START: \"GOOGLE_SIGN_IN_START\",\r\n  SIGN_IN_SUCCESS: \"SIGN_IN_SUCCESS\",\r\n  SIGN_IN_FAILURE: \"SIGN_IN_FAILURE\",\r\n  SIGN_OUT_START: \"SIGN_OUT_START\",\r\n  SIGN_OUT_SUCCESS: \"SIGN_OUT_SUCCESS\",\r\n  SIGN_OUT_FAILURE: \"SIGN_OUT_FAILURE\",\r\n};\r\n\r\nexport default userActionTypes;\r\n","import userActionTypes from \"./user.types\";\r\n\r\nexport const setCurrentUser = (user) => {\r\n  return {\r\n    type: userActionTypes.SET_CURRENT_USER,\r\n    payload: user,\r\n  };\r\n};\r\n\r\nexport const checkUserSession = () => {\r\n  return {\r\n    type: userActionTypes.CHECK_USER_SESSION,\r\n  };\r\n};\r\n\r\nexport const googleSignInStart = () => {\r\n  return {\r\n    type: userActionTypes.GOOGLE_SIGN_IN_START,\r\n  };\r\n};\r\n\r\nexport const signInSuccess = (user) => {\r\n  return {\r\n    type: userActionTypes.SIGN_IN_SUCCESS,\r\n    payload: user,\r\n  };\r\n};\r\n\r\nexport const signInFailure = (error) => {\r\n  return {\r\n    type: userActionTypes.SIGN_IN_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const signOutStart = () => {\r\n  return {\r\n    type: userActionTypes.SIGN_OUT_START,\r\n  };\r\n};\r\n\r\nexport const signOutSuccess = () => {\r\n  return {\r\n    type: userActionTypes.SIGN_OUT_SUCCESS,\r\n  };\r\n};\r\n\r\nexport const signOutFailure = (error) => {\r\n  return {\r\n    type: userActionTypes.SIGN_OUT_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  Icon,\r\n  useColorMode,\r\n  Button,\r\n} from \"@chakra-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { signOutStart } from \"../../redux/user/user.actions\";\r\n\r\nconst Header = () => {\r\n  const {currentUser} = useSelector((state) => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const bgColor = { light: \"white\", dark: \"gray.800\" };\r\n  const icon = { light: \"moon\", dark: \"sun\" };\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      align=\"center\"\r\n      justify=\"space-between\"\r\n      wrap=\"wrap\"\r\n      position=\"fixed\"\r\n      top=\"0\"\r\n      width=\"100%\"\r\n      padding=\"4\"\r\n      overflow=\"hidden\"\r\n      bg={bgColor[colorMode]}\r\n      borderBottom=\"1px\"\r\n      borderBottomColor=\"gray.100\"\r\n    >\r\n      <Flex align=\"center\" mr={5}>\r\n        <Icon name=\"edit\" mr={5} size=\"24px\" color=\"green.400\" />\r\n        <Heading as=\"h1\" size=\"lg\">\r\n          Post IT\r\n        </Heading>\r\n      </Flex>\r\n\r\n      <Box>\r\n        <Icon\r\n          name={icon[colorMode]}\r\n          onClick={toggleColorMode}\r\n          size=\"24px\"\r\n          cursor=\"pointer\"\r\n          mr=\"5\"\r\n        />\r\n        {currentUser ? (\r\n          <Button\r\n            leftIcon=\"small-close\"\r\n            variantColor=\"red\"\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(signOutStart())}\r\n          >\r\n            Log Out\r\n          </Button>\r\n        ) : null}\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Box, Heading, Button, Stack } from \"@chakra-ui/core\";\r\n\r\nimport { googleSignInStart } from \"../../redux/user/user.actions\";\r\n\r\nconst SignIn = ({ googleSignInStart }) => {\r\n  return (\r\n    <Box w=\"80%\">\r\n      <Stack spacing={4}>\r\n        <Heading as=\"h2\">Welcome to</Heading>\r\n        <Heading as=\"h3\">Post IT</Heading>\r\n        <Button\r\n          leftIcon=\"arrow-forward\"\r\n          width=\"250px\"\r\n          bg=\"red.500\"\r\n          onClick={() => googleSignInStart()}\r\n        >\r\n          Sign In with Google\r\n        </Button>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    googleSignInStart: () => dispatch(googleSignInStart()),\r\n  };\r\n};\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Box, Image } from \"@chakra-ui/core\";\r\n\r\nconst HomePage = () => {\r\n  const { currentUser } = useSelector((state) => state.user);\r\n  return (\r\n    <div>\r\n      <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\r\n        <Image src={currentUser.photoURL} alt=\"User Image\"></Image>\r\n        <Box\r\n          mt=\"1\"\r\n          fontWeight=\"semibold\"\r\n          as=\"h1\"\r\n          lineHeight=\"tight\"\r\n          isTruncated\r\n        >\r\n          Welcome {currentUser.displayName.split(\" \")[0]}\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React, { useEffect } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { Flex } from \"@chakra-ui/core\";\nimport { useSelector, connect } from \"react-redux\";\n\nimport Header from \"./components/header/header.component\";\nimport SignIn from \"./pages/sign-in/sign-in.component\";\nimport HomePage from \"./pages/homepage/homepage.component\";\n\nimport { checkUserSession } from \"./redux/user/user.actions\";\n\nconst App = ({checkUserSession}) => {\n  const { currentUser } = useSelector((state) => state.user);\n\n  useEffect(() => {\n    checkUserSession()\n  }, [checkUserSession]);\n\n  return (\n    <div>\n      <Header />\n      <Flex justify=\"center\" align=\"center\" w=\"100%\" h=\"93vh\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() =>\n              !currentUser ? <Redirect to=\"/sign-in\" /> : <HomePage />\n            }\n          />\n          <Route\n            exact\n            path=\"/sign-in\"\n            render={() => (currentUser ? <Redirect to=\"/\" /> : <SignIn />)}\n          />\n        </Switch>\n      </Flex>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    checkUserSession: () => dispatch(checkUserSession()),\n  };\n};\nexport default connect(null, mapDispatchToProps)(App);\n","import userActionTypes from \"./user.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null,\r\n  error: null,\r\n};\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case userActionTypes.SIGN_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n        error: null,\r\n      };\r\n    case userActionTypes.SIGN_OUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: null,\r\n        error: null,\r\n      };\r\n    case userActionTypes.SIGN_IN_FAILURE:\r\n    case userActionTypes.SIGN_OUT_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport userReducer from \"./user/user.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCtowyzKmi_8C2GcZMXJyDK6QI2CzOWgbc\",\r\n  authDomain: \"post-it-c5f71.firebaseapp.com\",\r\n  databaseURL: \"https://post-it-c5f71.firebaseio.com\",\r\n  projectId: \"post-it-c5f71\",\r\n  storageBucket: \"post-it-c5f71.appspot.com\",\r\n  messagingSenderId: \"510028817446\",\r\n  appId: \"1:510028817446:web:a59e6e4e09726d4835f2e7\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({\r\n  prompt: \"select_account\",\r\n});\r\n\r\nexport const createUserProfileDocument = async (userAuth) => {\r\n  if (!userAuth) return;\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapshot = await userRef.get();\r\n  if (!snapshot.exists) {\r\n    const { displayName, email, photoURL } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        photoURL,\r\n        createdAt,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n","import { takeLatest, all, put, call } from \"redux-saga/effects\";\r\n\r\nimport userActionTypes from \"./user.types\";\r\nimport {\r\n  signInFailure,\r\n  signInSuccess,\r\n  signOutSuccess,\r\n  signOutFailure,\r\n} from \"./user.actions\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart), call(onSignOutStart), call(onCheckUserSession)]);\r\n}\r\n","import { all, call } from \"redux-saga/effects\";\r\n\r\nimport { userSagas } from \"./user/user.sagas\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([call(userSagas)]);\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\nimport rootSaga from \"./root-saga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider>\n      <ColorModeProvider>\n        <CSSReset />\n        <BrowserRouter>\n          <React.StrictMode>\n            <App />\n          </React.StrictMode>\n        </BrowserRouter>\n      </ColorModeProvider>\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}